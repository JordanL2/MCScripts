#!/usr/bin/python3

from nbt.nbt import *
from nbt.region import *

import json
import math
import os.path
import sys
import time


HELP = """Usage: entity_info <PATH/TO/MC/SAVE> <DIMENSION> <MINX> <MINZ> <MAXX> <MAXZ> [option_name=option_value ...]

Mandatory arguments:
    PATH/TO/MC/SAVE   - Path to the Minecraft game save directory, usually found in ~/.minecraft/saves
    DIMENSION         - Dimension to search, possible values are:
        -1 = Nether
         0 = Overworld
         1 = End
    MINX              - Start X axis coordinate to search (blocks)
    MINZ              - Start Z axis coordinate to search (blocks)
    MAXX              - End X axis coordinate to search (blocks)
    MAXZ              - End Z axis coordinate to search (blocks)

Optional Arguments:
    entity_types      - Comma-separated list of entities type IDs to search for, minecraft:
                        will be appended automatically if no namespace is given
    sort              - Field to order list of entities by
    reverse           - Whether or not to reverse the order ('true' or 'false', default: false)
    use_last_modified - Whether or not to auto-adjust the age of entities by using the
                        game file's last modified time ('true' or 'false', default: false)
    show_uuid         - Whether or not to print out the UUID of each entity found
                        ('true' or 'false', default: false)
    output_type       - Output format, possible values are:
        human
        json
"""


def info(*messages):
    print("{}".format(' '.join([str(m) for m in messages])), file=sys.stderr)

def fatal(*messages):
    print("{}".format(' '.join([str(m) for m in messages])), file=sys.stderr)
    sys.exit(1)

def repr_uuid(uuid):
    return '-'.join([str(hex(i if i >= 0 else i + 2**32))[2:] for i in uuid])

def add_entity(entities, entity, riding=None):
    uuid = repr_uuid(entity['UUID'].value)
    entity_type = entity['id'].value

    entities[uuid] = {
        'type': entity_type,
        'x': entity['Pos'][0].value,
        'y': entity['Pos'][1].value,
        'z': entity['Pos'][2].value,
    }
    if 'Health' in entity:
        entities[uuid]['health'] = entity['Health'].value
    if riding is not None:
        entities[uuid]['riding'] = riding['id'].value
    if 'CustomName' in entity:
        custom_name = json.loads(entity['CustomName'].value)
        entities[uuid]['custom_name'] = custom_name['text']
    if entity_type == 'minecraft:villager':
        entities[uuid] = entities[uuid] | {
            'inventory': [(i[0].value, i[1].value) for i in entity['Inventory']],
            'profession': entity['VillagerData']['profession'].value,
            'profession_level': entity['VillagerData']['level'].value,
            'age': entity['Age'].value + (last_modified * 20 * use_last_modified),
            'gossips': [(g['Type'].value, g['Value'].value, g['Target'].value) for g in entity['Gossips']],
        }

# Constants
profession_levels = ['Novice', 'Apprentice', 'Journeyman', 'Expert', 'Master']

# Get mandatory arguments
scriptpath = sys.argv.pop(0)
if len(sys.argv) < 6:
    fatal(HELP)
mcsave = sys.argv.pop(0)
dim = int(sys.argv.pop(0))
minx = int(sys.argv.pop(0))
minz = int(sys.argv.pop(0))
maxx = int(sys.argv.pop(0))
maxz = int(sys.argv.pop(0))

if maxx < minx:
    temp = minx
    minx = maxx
    maxx = temp
if maxz < minz:
    temp = minz
    minz = maxz
    maxz = temp

# Get optional arguments
sort_dim = 'z'
sort_reverse = False
use_last_modified = 0
show_uuid = False
entity_types = None
output_type = 'human'
for a in sys.argv:
    i = a.index('=')
    k = a[0 : i]
    v = a[i + 1:]
    if k == 'sort':
        if v in ['x', 'y', 'z', 'age', 'health']:
            sort_dim = v
        else:
            fatal("No such sort value: '{}'".format(v))
    elif k == 'reverse':
        if v in ['true', 'false']:
            sort_reverse = (v == 'true')
        else:
            fatal("No such reverse value: '{}'".format(v))
    elif k == 'use_last_modified':
        if v in ['true', 'false']:
            use_last_modified = 0
            if v == 'true':
                use_last_modified = 1
        else:
            fatal("No such use_last_modified value: '{}'".format(v))
    elif k == 'show_uuid':
        if v in ['true', 'false']:
            show_uuid = (v == 'true')
        else:
            fatal("No such show_uuid value: '{}'".format(v))
    elif k == 'entity_types':
        entity_types = [e if ':' in e else 'minecraft:' + e for e in v.split(',')]
    elif k == 'output_type':
        if v in ['human', 'json']:
            output_type = v
        else:
            fatal("No such output_type value: '{}'".format(v))
    else:
        fatal("No such argument: '{}'".format(k))

# Get correct region files for dimension
if dim == 0:
    region_files = "{}/entities".format(mcsave)
elif dim == -1:
    region_files = "{}/DIM-1/entities".format(mcsave)
elif dim == 1:
    region_files = "{}/DIM1/entities".format(mcsave)
else:
    fatal("Dimension must be -1, 0 or 1")
if not os.path.exists(region_files):
    fatal("Directory not found: {}".format(region_files))

# Calculate chunk range to search within
minx_chunk = math.floor(minx / 16)
maxx_chunk = math.floor(maxx / 16)
minz_chunk = math.floor(minz / 16)
maxz_chunk = math.floor(maxz / 16)
info("Searching chunks: {},{} to {},{}".format(minx_chunk, minz_chunk, maxx_chunk, maxz_chunk))

# Calculate region files to search within
minx_region = math.floor(minx / 512)
maxx_region = math.floor(maxx / 512)
minz_region = math.floor(minz / 512)
maxz_region = math.floor(maxz / 512)
info("Searching regions: {},{} to {},{}".format(minx_region, minz_region, maxx_region, maxz_region))

# Search region files for matching entities
entities = {}
now = time.time()
for region_x in range(minx_region, maxx_region + 1):
    for region_z in range(minz_region, maxz_region + 1):
        region_file = "{}/r.{}.{}.mca".format(region_files, region_x, region_z)
        info("Region file: {}".format(region_file))

        last_modified = now - os.path.getmtime(region_file)
        info("Last modified: {} seconds ago".format(last_modified))
        
        tries = 3
        while True:
            try:
                region = RegionFile(region_file)
                chunks = region.get_chunks()
                for chunk in chunks:
                    x = chunk['x']
                    z = chunk['z']
                    chunk_nbt = region.get_chunk(x, z)
                    xPos = chunk_nbt['Position'][0]
                    zPos = chunk_nbt['Position'][1]
                    if xPos >= minx_chunk and xPos <= maxx_chunk and zPos >= minz_chunk and zPos <= maxz_chunk:
                        if 'Entities' in chunk_nbt:
                            for entity in chunk_nbt['Entities']:
                                entity_x = entity['Pos'][0].value
                                entity_y = entity['Pos'][1].value
                                entity_z = entity['Pos'][2].value
                                if entity_x >= minx and entity_x <= maxx and entity_z >= minz and entity_z <= maxz:
                                    if entity_types is None or entity['id'].value in entity_types:
                                        add_entity(entities, entity)
                                    if 'Passengers' in entity:
                                        for passenger in entity['Passengers']:
                                            if entity_types is None or passenger['id'].value in entity_types:
                                                add_entity(entities, passenger, entity)
                break
            except Exception as e:
                tries -= 1
                if tries == 0:
                    raise e
                time.sleep(5)

# Output entities found
if output_type == 'human':
    for uuid, entity in sorted(entities.items(), key=lambda v: v[1][sort_dim], reverse=sort_reverse):
        
        # UUID
        if show_uuid:
            print(uuid)

        # Show basic info
        custom_name = ''
        if 'custom_name' in entity:
            custom_name = " ({})".format(entity['custom_name'])
        health = ''
        if 'health' in entity:
            health = " | {}â™¥".format(int(entity['health']))
        riding = ''
        if 'riding' in entity:
            riding = " | Riding: {}".format(entity['riding'])
        print("{}{} | {} {} {}{}".format(
            entity['type'], custom_name, 
            math.floor(entity['x']), math.floor(entity['y']), math.floor(entity['z']),
            health, riding))

        # Villager
        if entity['type'] == 'minecraft:villager':
        
            # Profession
            profession = entity['profession']
            if profession != 'minecraft:none':
                profession += " - " + profession_levels[entity['profession_level'] - 1]
            
            # Age
            age = 'Adult'
            if entity['age'] < 0:
                seconds = round(-entity['age'] / 20)
                age = "{}:{:02d} until adult".format(math.floor(seconds / 60), seconds % 60)
                if use_last_modified == 1:
                    age += " at {}".format(time.strftime("%H:%M:%S", time.localtime(now + seconds)))

            print("{} | {}".format(profession, age))
            
            # Show inventory
            for n, i in enumerate(entity['inventory']):
                print("[{}] {}: {}".format(n + 1, i[0], i[1]))
            for n in range(len(entity['inventory']) + 1, 9):
                print("[{}] -".format(n))
            
            # Show gossips
            if len(entity['gossips']) > 0:
                print("Gossips:")
                for g in entity['gossips']:
                    g_uuid = repr_uuid(g[2])
                    print("- {} {} {}".format(g[0], g[1], g_uuid))
        
        print()

elif output_type == 'json':

    json_entities = []
    for uuid, entity in sorted(entities.items(), key=lambda v: v[1][sort_dim], reverse=sort_reverse):
        json_entities.append(entity | {'uuid': uuid})

    print(json.dumps({
        'results': json_entities,
        'count': len(json_entities)
        }))

else:
    fatal("Invalid output_type value: ''".format(output_type))
